//
//  GitHubGistStyleKit.swift
//  GitHubGist
//
//  Created by Scott Gardner on 5/11/17.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class GitHubGistStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfDefaultUserAvatar: UIImage?
        static var defaultUserAvatarTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawCommentsBubble(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 64, height: 60), resizing: ResizingBehavior = .aspectFit, number: String = "0") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 64, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 64, y: resizedFrame.height / 60)



        //// Variable Declarations
        let textSize: CGFloat = CGFloat(number.characters.count) < 3 ? 24 : (CGFloat(number.characters.count) < 4 ? 16 : (CGFloat(number.characters.count) < 5 ? 14 : 12))

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 41.88, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 13.2), controlPoint1: CGPoint(x: 44.14, y: 9), controlPoint2: CGPoint(x: 46, y: 10.89))
        bezierPath.addLine(to: CGPoint(x: 46, y: 35.6))
        bezierPath.addCurve(to: CGPoint(x: 41.88, y: 39.8), controlPoint1: CGPoint(x: 46, y: 37.91), controlPoint2: CGPoint(x: 44.14, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 26.2, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 13, y: 51))
        bezierPath.addLine(to: CGPoint(x: 13, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 6.12, y: 39.8))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 35.6), controlPoint1: CGPoint(x: 3.86, y: 39.8), controlPoint2: CGPoint(x: 2, y: 37.91))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.2))
        bezierPath.addCurve(to: CGPoint(x: 6.12, y: 9), controlPoint1: CGPoint(x: 2, y: 10.89), controlPoint2: CGPoint(x: 3.86, y: 9))
        bezierPath.addLine(to: CGPoint(x: 41.88, y: 9))
        bezierPath.close()
        UIColor.darkGray.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.miterLimit = 4
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 2, y: 9, width: 44, height: 31)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-Light", size: textSize)!, NSForegroundColorAttributeName: UIColor.darkGray, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = number.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        number.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: 54, y: 36)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 0.35))
        bezier2Path.addCurve(to: CGPoint(x: 0.09, y: 0.1), controlPoint1: CGPoint(x: 0, y: 0.26), controlPoint2: CGPoint(x: 0.03, y: 0.17))
        bezier2Path.addCurve(to: CGPoint(x: 0.54, y: 0.1), controlPoint1: CGPoint(x: 0.22, y: -0.03), controlPoint2: CGPoint(x: 0.42, y: -0.03))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 6.16))
        bezier2Path.addLine(to: CGPoint(x: 11.46, y: 0.1))
        bezier2Path.addCurve(to: CGPoint(x: 11.91, y: 0.1), controlPoint1: CGPoint(x: 11.58, y: -0.03), controlPoint2: CGPoint(x: 11.78, y: -0.03))
        bezier2Path.addCurve(to: CGPoint(x: 11.91, y: 0.6), controlPoint1: CGPoint(x: 12.03, y: 0.24), controlPoint2: CGPoint(x: 12.03, y: 0.46))
        bezier2Path.addLine(to: CGPoint(x: 6.22, y: 6.9))
        bezier2Path.addCurve(to: CGPoint(x: 5.78, y: 6.9), controlPoint1: CGPoint(x: 6.1, y: 7.04), controlPoint2: CGPoint(x: 5.9, y: 7.04))
        bezier2Path.addLine(to: CGPoint(x: 0.09, y: 0.6))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 0.35), controlPoint1: CGPoint(x: 0.03, y: 0.53), controlPoint2: CGPoint(x: 0, y: 0.44))
        bezier2Path.close()
        UIColor.darkGray.setFill()
        bezier2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDefaultUserAvatar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 64, height: 64), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 64, height: 64), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 64, y: resizedFrame.height / 64)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32, y: 35))
        bezierPath.addCurve(to: CGPoint(x: 15.5, y: 18.5), controlPoint1: CGPoint(x: 22.9, y: 35), controlPoint2: CGPoint(x: 15.5, y: 27.6))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 2), controlPoint1: CGPoint(x: 15.5, y: 9.4), controlPoint2: CGPoint(x: 22.9, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 48.5, y: 18.5), controlPoint1: CGPoint(x: 41.1, y: 2), controlPoint2: CGPoint(x: 48.5, y: 9.4))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 35), controlPoint1: CGPoint(x: 48.5, y: 27.6), controlPoint2: CGPoint(x: 41.1, y: 35))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 18.5, y: 18.5), controlPoint1: CGPoint(x: 24.56, y: 5), controlPoint2: CGPoint(x: 18.5, y: 11.06))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 32), controlPoint1: CGPoint(x: 18.5, y: 25.94), controlPoint2: CGPoint(x: 24.56, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 45.5, y: 18.5), controlPoint1: CGPoint(x: 39.44, y: 32), controlPoint2: CGPoint(x: 45.5, y: 25.94))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 5), controlPoint1: CGPoint(x: 45.5, y: 11.06), controlPoint2: CGPoint(x: 39.44, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 56, y: 62))
        bezierPath.addLine(to: CGPoint(x: 8, y: 62))
        bezierPath.addCurve(to: CGPoint(x: 3.5, y: 57.5), controlPoint1: CGPoint(x: 5.52, y: 62), controlPoint2: CGPoint(x: 3.5, y: 59.98))
        bezierPath.addCurve(to: CGPoint(x: 7.17, y: 47.6), controlPoint1: CGPoint(x: 3.5, y: 57.3), controlPoint2: CGPoint(x: 3.54, y: 52.44))
        bezierPath.addCurve(to: CGPoint(x: 15.78, y: 40.94), controlPoint1: CGPoint(x: 9.29, y: 44.78), controlPoint2: CGPoint(x: 12.19, y: 42.54))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 38), controlPoint1: CGPoint(x: 20.17, y: 38.99), controlPoint2: CGPoint(x: 25.63, y: 38))
        bezierPath.addCurve(to: CGPoint(x: 48.22, y: 40.94), controlPoint1: CGPoint(x: 38.37, y: 38), controlPoint2: CGPoint(x: 43.83, y: 38.99))
        bezierPath.addCurve(to: CGPoint(x: 56.82, y: 47.6), controlPoint1: CGPoint(x: 51.81, y: 42.54), controlPoint2: CGPoint(x: 54.71, y: 44.78))
        bezierPath.addCurve(to: CGPoint(x: 60.5, y: 57.5), controlPoint1: CGPoint(x: 60.46, y: 52.44), controlPoint2: CGPoint(x: 60.5, y: 57.3))
        bezierPath.addCurve(to: CGPoint(x: 56, y: 62), controlPoint1: CGPoint(x: 60.5, y: 59.98), controlPoint2: CGPoint(x: 58.48, y: 62))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 41))
        bezierPath.addCurve(to: CGPoint(x: 9.68, y: 49.27), controlPoint1: CGPoint(x: 21.54, y: 41), controlPoint2: CGPoint(x: 13.82, y: 43.86))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 57.51), controlPoint1: CGPoint(x: 6.57, y: 53.32), controlPoint2: CGPoint(x: 6.5, y: 57.46))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 59), controlPoint1: CGPoint(x: 6.5, y: 58.33), controlPoint2: CGPoint(x: 7.17, y: 59))
        bezierPath.addLine(to: CGPoint(x: 56, y: 59))
        bezierPath.addCurve(to: CGPoint(x: 57.5, y: 57.5), controlPoint1: CGPoint(x: 56.83, y: 59), controlPoint2: CGPoint(x: 57.5, y: 58.33))
        bezierPath.addCurve(to: CGPoint(x: 54.32, y: 49.27), controlPoint1: CGPoint(x: 57.5, y: 57.46), controlPoint2: CGPoint(x: 57.43, y: 53.32))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 41), controlPoint1: CGPoint(x: 50.18, y: 43.86), controlPoint2: CGPoint(x: 42.46, y: 41))
        bezierPath.close()
        UIColor.lightGray.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 608, height: 320), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 608, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 608, y: resizedFrame.height / 320)
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfDefaultUserAvatar: UIImage {
        if Cache.imageOfDefaultUserAvatar != nil {
            return Cache.imageOfDefaultUserAvatar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 64, height: 64), false, 0)
            GitHubGistStyleKit.drawDefaultUserAvatar()

        Cache.imageOfDefaultUserAvatar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDefaultUserAvatar!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var defaultUserAvatarTargets: [AnyObject]! {
        get { return Cache.defaultUserAvatarTargets }
        set {
            Cache.defaultUserAvatarTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: GitHubGistStyleKit.imageOfDefaultUserAvatar)
            }
        }
    }




    @objc(GitHubGistStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
